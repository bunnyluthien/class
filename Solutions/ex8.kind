// Basic exercises involving Lists

type List <A: Type> {
  nil // uma constante, lista vazia
  cons(head: A, tail: List<A>) //head -> especificando os elementos
  // tail -> a própria lista, o que n pegou do primeiro elemento
}
// pode ser uma lista de listas
// só tem um tipo, ex.: -> List<Pair<String, Nat>>

// type Either <A: Type, B: Type> { // funciona tipo Ou
//    left(value: A),
//    right(value: B),
// }

// Tipo.construtor<Tipo>() -> ex.: List.cons<Nat>()

// Returns the head of the List
head<A: Type>(xs: List<A>): Maybe<A>
  case xs {
    nil:  Maybe.none<A>
    cons: Maybe.some<A>(xs.head)
  }
// ex8:_
//   let list = []
//   head<Nat>(list)

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs {
    nil:  List.nil<A>
    cons: xs.tail
  }
// ex8:_
 // let lista = [5]
  // let list2 = ["a", "b", "c", "d"]
  // List.show<String>((x) x, tail<String>(list2))
// List.show<Nat>(Nat.show, tail<Nat>(lista))
//
// // Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
    nil:  Nat.zero
    cons: Nat.succ(length<A>(xs.tail))
  }
// ex8:_
//   let list = []
//   length<Nat>(list)

// // Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A>
  case xs {
    nil:  Maybe.none<A>
    cons: case xs.tail { //3
        nil:  Maybe.some<A>(xs.head) // xs.tail == vazio, então ele retorna o head == 3
        cons: last<A>(xs.tail)
      }
  }
// ex8:_
//   let list = [1, 2, 3]
//   last<Nat>(list)

// // Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
  case xs {
    nil:  List.nil<A>
    cons:
  }List.cons<Nat>()

// // Concatenates two lists
// concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
//   ?a
//
// // Removes n elements from the start of the list
// // List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
// drop<A: Type>(n: Nat, xs: List<A>): List<A>
//   ?drop
//
// // Creates a new list with the N first elements of the previous list
// // List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]
// take<A: Type>(n: Nat, xs: List<A>): List<A>
//   ?take
//
// // Applies a function to all elements of a list
// map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
//   ?a
//
// // Returns the same list, with the order reversed
// reverse<A: Type>(xs: List<A>): List<A>
//   reverse.go<A>(List.nil<A>, xs)
//
// reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
//   ?r
